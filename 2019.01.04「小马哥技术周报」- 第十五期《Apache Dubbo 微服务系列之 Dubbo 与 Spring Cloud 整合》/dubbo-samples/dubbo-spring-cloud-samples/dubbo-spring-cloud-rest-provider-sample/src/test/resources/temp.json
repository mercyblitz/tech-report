contexts:{bootstrap: {positiveMatches: {PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans}], ConfigurationPropertiesRebinderAutoConfiguration:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor; SearchStrategy: all) found bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor'}], ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesBeans:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesBeans; SearchStrategy: current) did not find any beans}], ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesRebinder:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder; SearchStrategy: current) did not find any beans}], EncryptionBootstrapConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.security.crypto.encrypt.TextEncryptor'; @ConditionalOnMissingClass did not find unwanted class}]}, negativeMatches: {EncryptionBootstrapConfiguration.RsaEncryptionConfiguration: {notMatched:[{condition: EncryptionBootstrapConfiguration.KeyCondition, message: Keystore nor key found in Environment}], matched:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.security.rsa.crypto.RsaSecretEncryptor'; @ConditionalOnMissingClass did not find unwanted class}]}, EncryptionBootstrapConfiguration.VanillaEncryptionConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnMissingClass found unwanted class 'org.springframework.security.rsa.crypto.RsaSecretEncryptor'}], matched:[]}}}, dubbo-spring-cloud-rest-provider-sample-1: {positiveMatches: {DubboAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'com.alibaba.dubbo.config.AbstractConfig'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message: @ConditionalOnProperty (dubbo.enabled: true) matched}], DubboAutoConfiguration#referenceAnnotationBeanPostProcessor:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: com.alibaba.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor; SearchStrategy: all) did not find any beans}], DubboAutoConfiguration#relaxedDubboConfigBinder:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.boot.context.properties.bind.Binder'; @ConditionalOnMissingClass did not find unwanted class}], DubboAutoConfiguration#serviceAnnotationBeanPostProcessor:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.boot.context.properties.source.ConfigurationPropertySources'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message: @ConditionalOnProperty (dubbo.scan.base-packages) matched}], AuditAutoConfiguration#auditListener:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.listener.AbstractAuditListener; SearchStrategy: all) did not find any beans}], AuditAutoConfiguration.AuditEventRepositoryConfiguration:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) did not find any beans}], AuditEventsEndpointAutoConfiguration#auditEventsEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) found bean 'auditEventRepository'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventsEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.auditevents.enabled found so using endpoint default}], BeansEndpointAutoConfiguration#beansEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.beans.BeansEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.beans.enabled found so using endpoint default}], ConditionsReportEndpointAutoConfiguration#conditionsReportEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint; SearchStrategy: current) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.conditions.enabled found so using endpoint default}], ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.configprops.enabled found so using endpoint default}], ElasticsearchHealthIndicatorAutoConfiguration:[{condition: OnEnabledHealthIndicatorCondition, message: @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true}], EndpointAutoConfiguration#endpointCachingOperationInvokerAdvisor:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor; SearchStrategy: all) did not find any beans}], EndpointAutoConfiguration#endpointOperationParameterMapper:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper; SearchStrategy: all) did not find any beans}], JmxEndpointAutoConfiguration#jmxAnnotationEndpointDiscoverer:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.jmx.JmxEndpointsSupplier; SearchStrategy: all) did not find any beans}], JmxEndpointAutoConfiguration#jmxMBeanExporter:[{condition: OnBeanCondition, message: @ConditionalOnSingleCandidate (types: javax.management.MBeanServer; SearchStrategy: all) found a primary bean from beans 'mbeanServer'}], HealthEndpointConfiguration#healthEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.health.enabled found so using endpoint default}], HealthEndpointWebExtensionConfiguration#createHealthStatusHttpMapper:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthStatusHttpMapper; SearchStrategy: all) did not find any beans}], HealthEndpointWebExtensionConfiguration#healthWebEndpointResponseMapper:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthWebEndpointResponseMapper; SearchStrategy: all) did not find any beans}], HealthIndicatorAutoConfiguration#healthAggregator:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthAggregator; SearchStrategy: all) did not find any beans}], InfoContributorAutoConfiguration#envInfoContributor:[{condition: OnEnabledInfoContributorCondition, message: @ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true}], InfoEndpointAutoConfiguration#infoEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.info.InfoEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.info.enabled found so using endpoint default}], LoggersEndpointAutoConfiguration#loggersEndpoint:[{condition: LoggersEndpointAutoConfiguration.OnEnabledLoggingSystemCondition, message: Logging System enabled}, {condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.boot.logging.LoggingSystem; SearchStrategy: all) found bean 'springBootLoggingSystem'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.logging.LoggersEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.loggers.enabled found so using endpoint default}], HeapDumpWebEndpointAutoConfiguration#heapDumpWebEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.HeapDumpWebEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.heapdump.enabled found so using endpoint default}], ThreadDumpEndpointAutoConfiguration#dumpEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.ThreadDumpEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.threaddump.enabled found so using endpoint default}], CompositeMeterRegistryAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'io.micrometer.core.instrument.composite.CompositeMeterRegistry'; @ConditionalOnMissingClass did not find unwanted class}], MetricsAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed'; @ConditionalOnMissingClass did not find unwanted class}], MetricsAutoConfiguration#micrometerClock:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) did not find any beans}], MetricsAutoConfiguration.JvmMeterBindersConfiguration:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (management.metrics.binders.jvm.enabled) matched}], MetricsAutoConfiguration.JvmMeterBindersConfiguration#classLoaderMetrics:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics; SearchStrategy: all) did not find any beans}], MetricsAutoConfiguration.JvmMeterBindersConfiguration#jvmGcMetrics:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmGcMetrics; SearchStrategy: all) did not find any beans}], MetricsAutoConfiguration.JvmMeterBindersConfiguration#jvmMemoryMetrics:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics; SearchStrategy: all) did not find any beans}], MetricsAutoConfiguration.JvmMeterBindersConfiguration#jvmThreadMetrics:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics; SearchStrategy: all) did not find any beans}], MetricsAutoConfiguration.MeterBindersConfiguration#fileDescriptorMetrics:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (management.metrics.binders.files.enabled) matched}, {condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.FileDescriptorMetrics; SearchStrategy: all) did not find any beans}], MetricsAutoConfiguration.MeterBindersConfiguration#logbackMetrics:[{condition: OnClassCondition, message: @ConditionalOnClass found required classes 'ch.qos.logback.classic.LoggerContext', 'org.slf4j.LoggerFactory'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message:@ConditionalOnProperty (management.metrics.binders.logback.enabled) matched}, {condition: MetricsAutoConfiguration.LogbackLoggingCondition, message: LogbackLoggingCondition ILoggerFactory is a Logback LoggerContext}, {condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.logging.LogbackMetrics; SearchStrategy: all) did not find any beans}], MetricsAutoConfiguration.MeterBindersConfiguration#processorMetrics:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (management.metrics.binders.processor.enabled) matched}, {condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.ProcessorMetrics; SearchStrategy: all) did not find any beans}], MetricsAutoConfiguration.MeterBindersConfiguration#uptimeMetrics:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (management.metrics.binders.uptime.enabled) matched}, {condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.UptimeMetrics; SearchStrategy: all) did not find any beans}], MetricsEndpointAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed'; @ConditionalOnMissingClass did not find unwanted class}], MetricsEndpointAutoConfiguration#metricsEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.MetricsEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.metrics.enabled found so using endpoint default}], CacheMeterBinderProvidersConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.MeterBinder'; @ConditionalOnMissingClass did not find unwanted class}], SimpleMetricsExportAutoConfiguration:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (management.metrics.export.simple.enabled:true) matched}, {condition: OnBeanCondition, message: @ConditionalOnBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) found bean 'micrometerClock'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans}], SimpleMetricsExportAutoConfiguration#simpleConfig:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.simple.SimpleConfig; SearchStrategy: all) did not find any beans}], RestTemplateMetricsAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnBeanCondition, message: @ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'simpleMeterRegistry'}], RestTemplateMetricsAutoConfiguration#restTemplateTagConfigurer:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTagsProvider; SearchStrategy: all) did not find any beans}], MongoHealthIndicatorAutoConfiguration:[{condition: OnEnabledHealthIndicatorCondition, message: @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true}], RedisHealthIndicatorAutoConfiguration:[{condition: OnEnabledHealthIndicatorCondition, message: @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true}], ScheduledTasksEndpointAutoConfiguration#scheduledTasksEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.scheduledtasks.enabled found so using endpoint default}], DiskSpaceHealthIndicatorAutoConfiguration:[{condition: OnEnabledHealthIndicatorCondition, message: @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true}], DiskSpaceHealthIndicatorAutoConfiguration#diskSpaceHealthIndicator:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (names: diskSpaceHealthIndicator; SearchStrategy: all) did not find any beans}], MappingsEndpointAutoConfiguration#mappingsEndpoint:[{condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.mappings.enabled found so using endpoint default}], AopAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required classes 'org.springframework.context.annotation.EnableAspectJAutoProxy', 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice', 'org.aspectj.weaver.AnnotatedElement'; @ConditionalOnMissingClass did not find unwanted class}, {condition:OnPropertyCondition, message: @ConditionalOnProperty (spring.aop.auto: true) matched}], AopAutoConfiguration.CglibAutoProxyConfiguration:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.aop.proxy-target-class:true) matched}], GenericCacheConfiguration:[{condition: CacheCondition, message: Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type}], NoOpCacheConfiguration:[{condition: CacheCondition, message: Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type}], SimpleCacheConfiguration:[{condition: CacheCondition, message: Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type}], PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans}], HttpMessageConvertersAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter'; @ConditionalOnMissingClass did not find unwanted class}], HttpMessageConvertersAutoConfiguration#messageConverters:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.http.HttpMessageConverters; SearchStrategy: all) did not find any beans}], HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.http.converter.StringHttpMessageConverter'; @ConditionalOnMissingClass did not find unwanted class}], HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration#stringHttpMessageConverter:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.http.converter.StringHttpMessageConverter; SearchStrategy: all) did not find any beans}], JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.http.converters.preferred-json-mapper: jackson) matched}, {condition: OnBeanCondition, message: @ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'}], JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration#mappingJackson2HttpMessageConverter:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; SearchStrategy: all) did not find any beans}], CodecsAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.http.codec.CodecConfigurer'; @ConditionalOnMissingClass did not find unwanted class}], CodecsAutoConfiguration.JacksonCodecConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'; @ConditionalOnMissingClass did not find unwanted class}], CodecsAutoConfiguration.JacksonCodecConfiguration#jacksonCodecCustomizer:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'}], JacksonAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'; @ConditionalOnMissingClass did not find unwanted class}], JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'; @ConditionalOnMissingClass did not find unwanted class}], JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'; @ConditionalOnMissingClass did not find unwanted class}], JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans}], JacksonAutoConfiguration.JacksonObjectMapperConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'; @ConditionalOnMissingClass did not find unwanted class}], JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans}], JmxAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.jmx.enabled: true) matched}], JmxAutoConfiguration#mbeanExporter:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans}], JmxAutoConfiguration#mbeanServer:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans}], JmxAutoConfiguration#objectNamingStrategy:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans}], ValidationAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'javax.validation.executable.ExecutableValidator'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnResourceCondition, message: @ConditionalOnResource found location classpath: META-INF/services/javax.validation.spi.ValidationProvider}], ValidationAutoConfiguration#defaultValidator:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: javax.validation.Validator; SearchStrategy: all) did not find any beans}], ValidationAutoConfiguration#methodValidationPostProcessor:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.validation.beanvalidation.MethodValidationPostProcessor; SearchStrategy: all) did not find any beans}], RestTemplateAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'; @ConditionalOnMissingClass did not find unwanted class}], RestTemplateAutoConfiguration#restTemplateBuilder:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) did not find any beans}], NacosDiscoveryAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched; @ConditionalOnProperty (spring.cloud.nacos.discovery.enabled) matched}], NacosDiscoveryAutoConfiguration#nacosAutoServiceRegistration:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties; SearchStrategy: all) found bean 'spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties'}], NacosDiscoveryAutoConfiguration#nacosRegistration:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties; SearchStrategy: all) found bean 'spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties'}], NacosDiscoveryClientAutoConfiguration:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.nacos.discovery.enabled) matched}, {condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.client.discovery.DiscoveryClient; SearchStrategy: all) did not find any beans}], NacosDiscoveryClientAutoConfiguration#nacosProperties:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.alibaba.nacos.NacosDiscoveryProperties; SearchStrategy: all) did not find any beans}], NacosDiscoveryEndpointAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.boot.actuate.endpoint.annotation.Endpoint'; @ConditionalOnMissingClass did not find unwanted class}], NacosDiscoveryEndpointAutoConfiguration#nacosDiscoveryEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.alibaba.nacos.endpoint.NacosDiscoveryEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.nacos-discovery.enabled found so using endpoint default}], RibbonNacosAutoConfiguration:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (ribbon.nacos.enabled) matched}, {condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.netflix.ribbon.SpringClientFactory; SearchStrategy: all) found bean 'springClientFactory'}], SentinelAutoConfiguration:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.sentinel.enabled) matched}], SentinelAutoConfiguration#sentinelBeanPostProcessor:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.alibaba.sentinel.custom.SentinelBeanPostProcessor; SearchStrategy: all) did not find any beans}], SentinelAutoConfiguration#sentinelResourceAspect:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: com.alibaba.csp.sentinel.annotation.aspectj.SentinelResourceAspect; SearchStrategy: all) did not find any beans}], SentinelEndpointAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.boot.actuate.endpoint.annotation.Endpoint'; @ConditionalOnMissingClass did not find unwanted class}], SentinelEndpointAutoConfiguration#sentinelEndPoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.alibaba.sentinel.endpoint.SentinelEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.sentinel.enabled found so using endpoint default}], ConfigurationPropertiesRebinderAutoConfiguration:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor; SearchStrategy: all) found bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor'}], ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesBeans:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesBeans; SearchStrategy: current) did not find any beans}], ConfigurationPropertiesRebinderAutoConfiguration#configurationPropertiesRebinder:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.context.properties.ConfigurationPropertiesRebinder; SearchStrategy: current) did not find any beans}], LifecycleMvcEndpointAutoConfiguration#environmentManager:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.context.environment.EnvironmentManager; SearchStrategy: all) did not find any beans}], RefreshAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.cloud.context.scope.refresh.RefreshScope'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.refresh.enabled) matched}], RefreshAutoConfiguration#contextRefresher:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.context.refresh.ContextRefresher; SearchStrategy: all) did not find any beans}], RefreshAutoConfiguration#loggingRebinder:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.logging.LoggingRebinder; SearchStrategy: all) did not find any beans}], RefreshAutoConfiguration#refreshScope:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.context.scope.refresh.RefreshScope; SearchStrategy: all) did not find any beans}], RefreshEndpointAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required classes 'org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration', 'org.springframework.boot.actuate.health.Health'; @ConditionalOnMissingClass did not find unwanted class}], RefreshEndpointAutoConfiguration#refreshScopeHealthIndicator:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.health.RefreshScopeHealthIndicator; SearchStrategy: all) did not find any beans}, {condition: OnEnabledHealthIndicatorCondition, message: @ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true}], RefreshEndpointAutoConfiguration.RefreshEndpointConfiguration:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration; SearchStrategy: all) found bean 'propertySourceBootstrapConfiguration'}], RefreshEndpointAutoConfiguration.RefreshEndpointConfiguration#refreshEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.context.refresh.ContextRefresher; SearchStrategy: all) found bean 'contextRefresher'; @ConditionalOnMissingBean (types: org.springframework.cloud.endpoint.RefreshEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.refresh.enabled found so using endpoint default}], RestartEndpointWithoutIntegrationConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class; @ConditionalOnMissingClass did not find unwanted class 'org.springframework.integration.monitor.IntegrationMBeanExporter'}], WritableEnvironmentEndpointAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required classes 'org.springframework.boot.actuate.env.EnvironmentEndpoint', 'org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnBeanCondition, message:@ConditionalOnBean (types: org.springframework.cloud.context.environment.EnvironmentManager; SearchStrategy: all) found bean 'environmentManager'}], WritableEnvironmentEndpointAutoConfiguration#environmentEndpoint:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.context.environment.WritableEnvironmentEndpoint; SearchStrategy: all) did not find any beans}, {condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.env.enabled found so using endpoint default}], WritableEnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension:[{condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.env.enabled found so using endpoint default}], CommonsClientAutoConfiguration.ActuatorConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.boot.actuate.endpoint.annotation.Endpoint'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.features.enabled) matched}], CommonsClientAutoConfiguration.ActuatorConfiguration#featuresEndpoint:[{condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.features.enabled found so using endpoint default}], CommonsClientAutoConfiguration.DiscoveryLoadBalancerConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.boot.actuate.health.HealthIndicator'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.discovery.enabled) matched}, {condition: OnBeanCondition, message:@ConditionalOnBean (types: org.springframework.cloud.client.discovery.DiscoveryClient; SearchStrategy: all) found bean 'nacosDiscoveryClient'}], CommonsClientAutoConfiguration.DiscoveryLoadBalancerConfiguration#discoveryClientHealthIndicator:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.discovery.client.health-indicator.enabled) matched}], CommonsClientAutoConfiguration.DiscoveryLoadBalancerConfiguration#discoveryCompositeHealthIndicator:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.discovery.client.composite-indicator.enabled) matched}, {condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.client.discovery.health.DiscoveryHealthIndicator, org.springframework.boot.actuate.health.HealthAggregator; SearchStrategy: all) found beans 'discoveryClientHealthIndicator', 'healthAggregator'}], AsyncLoadBalancerAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.web.client.AsyncRestTemplate'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerClient; SearchStrategy: all) found bean 'loadBalancerClient'}], LoadBalancerAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerClient; SearchStrategy: all) found bean 'loadBalancerClient'}], LoadBalancerAutoConfiguration#loadBalancerRequestFactory:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerRequestFactory; SearchStrategy: all) did not find any beans}], LoadBalancerAutoConfiguration.LoadBalancerInterceptorConfig:[{condition: OnClassCondition, message: @ConditionalOnClass found required class; @ConditionalOnMissingClass did not find unwanted class 'org.springframework.retry.support.RetryTemplate'}], LoadBalancerAutoConfiguration.LoadBalancerInterceptorConfig#restTemplateCustomizer:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.client.loadbalancer.RestTemplateCustomizer; SearchStrategy: all) did not find any beans}], AutoServiceRegistrationAutoConfiguration:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched}], AutoServiceRegistrationConfiguration:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.service-registry.auto-registration.enabled) matched}], ServiceRegistryAutoConfiguration.ServiceRegistryEndpointConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.boot.actuate.endpoint.annotation.Endpoint'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.client.serviceregistry.ServiceRegistry; SearchStrategy: all) found bean 'nacosServiceRegistry'}], ServiceRegistryAutoConfiguration.ServiceRegistryEndpointConfiguration#serviceRegistryEndpoint:[{condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.service-registry.enabled found so using endpoint default}], HttpClientConfiguration.ApacheHttpClientConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.apache.http.client.HttpClient'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.httpclientfactories.apache.enabled) matched}], HttpClientConfiguration.ApacheHttpClientConfiguration#apacheHttpClientBuilder:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.apache.http.impl.client.HttpClientBuilder; SearchStrategy: all) did not find any beans}], HttpClientConfiguration.ApacheHttpClientConfiguration#apacheHttpClientFactory:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.commons.httpclient.ApacheHttpClientFactory; SearchStrategy: all) did not find any beans}], HttpClientConfiguration.ApacheHttpClientConfiguration#connManFactory:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.commons.httpclient.ApacheHttpClientConnectionManagerFactory; SearchStrategy: all) did not find any beans}], UtilAutoConfiguration:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.cloud.util.enabled) matched}], UtilAutoConfiguration#inetUtils:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.commons.util.InetUtils; SearchStrategy: all) did not find any beans}], ArchaiusAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required classes 'com.netflix.config.ConcurrentCompositeConfiguration', 'org.apache.commons.configuration.ConfigurationBuilder'; @ConditionalOnMissingClass did not find unwanted class}], ArchaiusAutoConfiguration.ArchaiusEndpointConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.boot.actuate.health.Health'; @ConditionalOnMissingClass did not find unwanted class}], ArchaiusAutoConfiguration.ArchaiusEndpointConfiguration#archaiusEndpoint:[{condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.archaius.enabled found so using endpoint default}], ArchaiusAutoConfiguration.PropagateEventsConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.cloud.context.environment.EnvironmentChangeEvent'; @ConditionalOnMissingClass did not find unwanted class}, {condition: OnPropertyCondition, message: @ConditionalOnProperty (archaius.propagate.environmentChangedEvent) matched}], RibbonAutoConfiguration:[{condition: OnClassCondition, message: @ConditionalOnClass found required classes 'com.netflix.client.IClient', 'org.springframework.web.client.RestTemplate', 'org.springframework.web.client.AsyncRestTemplate', 'com.netflix.ribbon.Ribbon'; @ConditionalOnMissingClass did not find unwanted class}], RibbonAutoConfiguration#loadBalancerClient:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerClient; SearchStrategy: all) did not find any beans}], RibbonAutoConfiguration#propertiesFactory:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.netflix.ribbon.PropertiesFactory; SearchStrategy: all) did not find any beans}]}, negativeMatches: {DubboAutoConfiguration.MultipleDubboConfigConfiguration: {notMatched:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (dubbo.config.multiple:true) did not find property 'dubbo.config.multiple'}], matched:[]}, RabbitHealthIndicatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.amqp.rabbit.core.RabbitTemplate'}], matched:[]}, AuditAutoConfiguration#authenticationAuditListener: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.security.authentication.event.AbstractAuthenticationEvent'}], matched:[]}, AuditAutoConfiguration#authorizationAuditListener: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.security.access.event.AbstractAuthorizationEvent'}], matched:[]}, CassandraHealthIndicatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.data.cassandra.core.CassandraOperations', 'com.datastax.driver.core.Cluster'}], matched:[]}, ReactiveCloudFoundryActuatorAutoConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: not a reactive web application}], matched:[]}, CloudFoundryActuatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.servlet.DispatcherServlet'}], matched:[]}, ShutdownEndpointAutoConfiguration#shutdownEndpoint: {notMatched:[{condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.shutdown.enabled found so using endpoint default}], matched:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.ShutdownEndpoint; SearchStrategy: all) did not find any beans}]}, CouchbaseHealthIndicatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'}], matched:[]}, ElasticsearchHealthIndicatorAutoConfiguration.ElasticsearchClientHealthIndicatorConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.elasticsearch.client.Client'}], matched:[]}, ElasticsearchHealthIndicatorAutoConfiguration.ElasticsearchJestHealthIndicatorConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.searchbox.client.JestClient'}], matched:[]}, WebEndpointAutoConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: @ConditionalOnWebApplication (required) not a servlet web application and not a reactive web application}], matched:[]}, EnvironmentEndpointAutoConfiguration#environmentEndpoint: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) found beans of type 'org.springframework.boot.actuate.env.EnvironmentEndpoint' environmentEndpoint}], matched:[]}, EnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension; SearchStrategy: all) found beans of type 'org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension' environmentEndpointWebExtension}], matched:[]}, FlywayEndpointAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'}], matched:[]}, HealthEndpointWebExtensionConfiguration.ReactiveWebHealthConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: not a reactive web application}], matched:[]}, HealthEndpointWebExtensionConfiguration.ServletWebHealthConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: not a servlet web application}], matched:[]}, HealthIndicatorAutoConfiguration#applicationHealthIndicator: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthIndicator, org.springframework.boot.actuate.health.ReactiveHealthIndicator; SearchStrategy: all) found beans of type 'org.springframework.boot.actuate.health.HealthIndicator' diskSpaceHealthIndicator}], matched:[]}, InfluxDbHealthIndicatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.influxdb.InfluxDB'}], matched:[]}, InfoContributorAutoConfiguration#buildInfoContributor: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnSingleCandidate (types: org.springframework.boot.info.BuildProperties; SearchStrategy: all) did not find any beans}], matched:[{condition: OnEnabledInfoContributorCondition, message: @ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true}]}, InfoContributorAutoConfiguration#gitInfoContributor: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnSingleCandidate (types: org.springframework.boot.info.GitProperties; SearchStrategy: all) did not find any beans}], matched:[{condition: OnEnabledInfoContributorCondition, message: @ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true}]}, DataSourceHealthIndicatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource'}], matched:[]}, JmsHealthIndicatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory'}], matched:[]}, JolokiaEndpointAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.jolokia.http.AgentServlet'}], matched:[]}, LdapHealthIndicatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.ldap.core.LdapOperations'}], matched:[]}, LiquibaseEndpointAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'liquibase.integration.spring.SpringLiquibase'}], matched:[]}, LogFileWebEndpointAutoConfiguration#logFileWebEndpoint: {notMatched:[{condition: LogFileWebEndpointAutoConfiguration.LogFileCondition, message: Log File did not find logging file}], matched:[]}, MailHealthIndicatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.mail.javamail.JavaMailSenderImpl'}], matched:[]}, CompositeMeterRegistryConfiguration: {notMatched:[{condition: CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition, message: NoneNestedConditions 1 matched 1 did not; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.SingleInjectableMeterRegistry @ConditionalOnSingleCandidate (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found a primary bean from beans 'simpleMeterRegistry'; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.NoMeterRegistryCondition @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry}], matched:[]}, NoOpMeterRegistryConfiguration: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' simpleMeterRegistry}], matched:[]}, RabbitMetricsAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.rabbitmq.client.ConnectionFactory', 'org.springframework.amqp.rabbit.connection.AbstractConnectionFactory'}], matched:[]}, CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.cache.caffeine.CaffeineCache', 'com.github.benmanes.caffeine.cache.Cache'}], matched:[]}, CacheMeterBinderProvidersConfiguration.EhCache2CacheMeterBinderProviderConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.cache.ehcache.EhCacheCache', 'net.sf.ehcache.Ehcache'}], matched:[]}, CacheMeterBinderProvidersConfiguration.HazelcastCacheMeterBinderProviderConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.hazelcast.spring.cache.HazelcastCache', 'com.hazelcast.core.Hazelcast'}], matched:[]}, CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.cache.jcache.JCacheCache', 'javax.cache.CacheManager'}], matched:[]}, CacheMetricsAutoConfiguration: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans of type org.springframework.cache.CacheManager}], matched:[]}, AtlasMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.atlas.AtlasMeterRegistry'}], matched:[]}, DatadogMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.datadog.DatadogMeterRegistry'}], matched:[]}, GangliaMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.ganglia.GangliaMeterRegistry'}], matched:[]}, GraphiteMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.graphite.GraphiteMeterRegistry'}], matched:[]}, InfluxMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.influx.InfluxMeterRegistry'}], matched:[]}, JmxMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.jmx.JmxMeterRegistry'}], matched:[]}, NewRelicMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.newrelic.NewRelicMeterRegistry'}], matched:[]}, PrometheusMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.prometheus.PrometheusMeterRegistry'}], matched:[]}, SignalFxMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.signalfx.SignalFxMeterRegistry'}], matched:[]}, StatsdMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.statsd.StatsdMeterRegistry'}], matched:[]}, WavefrontMetricsExportAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.micrometer.wavefront.WavefrontMeterRegistry'}], matched:[]}, DataSourcePoolMetricsAutoConfiguration: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: javax.sql.DataSource, io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans of type javax.sql.DataSource}], matched:[{condition: OnClassCondition, message: @ConditionalOnClass found required classes 'javax.sql.DataSource', 'io.micrometer.core.instrument.MeterRegistry'; @ConditionalOnMissingClass did not find unwanted class}]}, DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.zaxxer.hikari.HikariDataSource'}, {condition: ConditionEvaluationReport.AncestorsMatchedCondition, message: Ancestor org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration did not match}], matched:[]}, WebFluxMetricsAutoConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: not a reactive web application}], matched:[]}, WebMvcMetricsAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.servlet.DispatcherServlet'}], matched:[]}, TomcatMetricsAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.apache.catalina.Manager'}], matched:[]}, MongoHealthIndicatorConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.data.mongodb.core.MongoTemplate'}], matched:[]}, MongoReactiveHealthIndicatorConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.data.mongodb.core.ReactiveMongoTemplate'}], matched:[]}, Neo4jHealthIndicatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.neo4j.ogm.session.SessionFactory'}], matched:[]}, RedisHealthIndicatorConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory'}], matched:[]}, RedisReactiveHealthIndicatorConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.data.redis.connection.ReactiveRedisConnectionFactory', 'reactor.core.publisher.Flux'}], matched:[]}, SessionsEndpointAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.session.FindByIndexNameSessionRepository'}], matched:[]}, SolrHealthIndicatorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.SolrClient'}], matched:[]}, HttpTraceAutoConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: @ConditionalOnWebApplication (required) not a servlet web application and not a reactive web application}], matched:[]}, HttpTraceEndpointAutoConfiguration#httpTraceEndpoint: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.boot.actuate.trace.http.HttpTraceRepository; SearchStrategy: all) did not find any beans of type org.springframework.boot.actuate.trace.http.HttpTraceRepository}], matched:[]}, MappingsEndpointAutoConfiguration.ReactiveWebConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler'}], matched:[]}, MappingsEndpointAutoConfiguration.ServletWebConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: not a servlet web application}], matched:[]}, ReactiveManagementContextAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux'}], matched:[]}, ManagementContextAutoConfiguration.DifferentManagementContextConfiguration: {notMatched:[{condition: OnManagementPortCondition, message: Management Port non web application context}], matched:[]}, ManagementContextAutoConfiguration.SameManagementContextConfiguration: {notMatched:[{condition: OnManagementPortCondition, message: Management Port non web application context}], matched:[]}, ServletManagementContextAutoConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: not a servlet web application}], matched:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'javax.servlet.Servlet'; @ConditionalOnMissingClass did not find unwanted class}]}, SpringApplicationAdminJmxAutoConfiguration: {notMatched:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.application.admin.enabled:true) did not find property 'enabled'}], matched:[]}, RabbitAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.amqp.rabbit.core.RabbitTemplate', 'com.rabbitmq.client.Channel'}], matched:[]}, AopAutoConfiguration.JdkDynamicAutoProxyConfiguration: {notMatched:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.aop.proxy-target-class:false) did not find property 'proxy-target-class'}], matched:[]}, BatchAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.batch.core.launch.JobLauncher', 'org.springframework.jdbc.core.JdbcOperations'}], matched:[]}, CacheAutoConfiguration: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) did not find any beans of type org.springframework.cache.interceptor.CacheAspectSupport}], matched:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.cache.CacheManager'; @ConditionalOnMissingClass did not find unwanted class}]}, CacheAutoConfiguration.CacheManagerJpaDependencyConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean'}, {condition: ConditionEvaluationReport.AncestorsMatchedCondition, message: Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match}], matched:[]}, CaffeineCacheConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.github.benmanes.caffeine.cache.Caffeine', 'org.springframework.cache.caffeine.CaffeineCacheManager'}], matched:[]}, CouchbaseCacheConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'com.couchbase.client.spring.cache.CouchbaseCacheManager'}], matched:[]}, EhCacheCacheConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'net.sf.ehcache.Cache', 'org.springframework.cache.ehcache.EhCacheCacheManager'}], matched:[]}, HazelcastCacheConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.hazelcast.core.HazelcastInstance', 'com.hazelcast.spring.cache.HazelcastCacheManager'}], matched:[]}, InfinispanCacheConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.infinispan.spring.provider.SpringEmbeddedCacheManager'}], matched:[]}, JCacheCacheConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'javax.cache.Caching', 'org.springframework.cache.jcache.JCacheCacheManager'}], matched:[]}, RedisCacheConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory'}], matched:[]}, CassandraAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.datastax.driver.core.Cluster'}], matched:[]}, CloudAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.cloud.config.java.CloudScanConfiguration'}], matched:[]}, MessageSourceAutoConfiguration: {notMatched:[{condition: MessageSourceAutoConfiguration.ResourceBundleCondition, message: ResourceBundle did not find bundle with basename messages}], matched:[]}, CouchbaseAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.couchbase.client.java.CouchbaseBucket', 'com.couchbase.client.java.Cluster'}], matched:[]}, PersistenceExceptionTranslationAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor'}], matched:[]}, CassandraDataAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.datastax.driver.core.Cluster', 'org.springframework.data.cassandra.core.CassandraAdminOperations'}], matched:[]}, CassandraReactiveDataAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.datastax.driver.core.Cluster', 'org.springframework.data.cassandra.core.ReactiveCassandraTemplate', 'reactor.core.publisher.Flux'}], matched:[]}, CassandraReactiveRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.data.cassandra.ReactiveSession', 'org.springframework.data.cassandra.repository.ReactiveCassandraRepository'}], matched:[]}, CassandraRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.datastax.driver.core.Session', 'org.springframework.data.cassandra.repository.CassandraRepository'}], matched:[]}, CouchbaseDataAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'org.springframework.data.couchbase.repository.CouchbaseRepository'}], matched:[]}, CouchbaseReactiveDataAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'org.springframework.data.couchbase.repository.ReactiveCouchbaseRepository', 'reactor.core.publisher.Flux'}], matched:[]}, CouchbaseReactiveRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'org.springframework.data.couchbase.repository.ReactiveCouchbaseRepository', 'reactor.core.publisher.Flux'}], matched:[]}, CouchbaseRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.couchbase.client.java.Bucket', 'org.springframework.data.couchbase.repository.CouchbaseRepository'}], matched:[]}, ElasticsearchAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.elasticsearch.client.Client', 'org.springframework.data.elasticsearch.client.TransportClientFactoryBean'}], matched:[]}, ElasticsearchDataAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.elasticsearch.client.Client', 'org.springframework.data.elasticsearch.core.ElasticsearchTemplate'}], matched:[]}, ElasticsearchRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.elasticsearch.client.Client', 'org.springframework.data.elasticsearch.repository.ElasticsearchRepository'}], matched:[]}, JpaRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.data.jpa.repository.JpaRepository'}], matched:[]}, LdapDataAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository'}], matched:[]}, LdapRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository'}], matched:[]}, MongoDataAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.mongodb.MongoClient', 'org.springframework.data.mongodb.core.MongoTemplate'}], matched:[]}, MongoReactiveDataAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.mongodb.reactivestreams.client.MongoClient', 'org.springframework.data.mongodb.core.ReactiveMongoTemplate'}], matched:[]}, MongoReactiveRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.mongodb.reactivestreams.client.MongoClient', 'org.springframework.data.mongodb.repository.ReactiveMongoRepository'}], matched:[]}, MongoRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.mongodb.MongoClient', 'org.springframework.data.mongodb.repository.MongoRepository'}], matched:[]}, Neo4jDataAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.neo4j.ogm.session.SessionFactory', 'org.springframework.data.neo4j.transaction.Neo4jTransactionManager', 'org.springframework.transaction.PlatformTransactionManager'}], matched:[]}, Neo4jRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.neo4j.ogm.session.Neo4jSession', 'org.springframework.data.neo4j.repository.Neo4jRepository'}], matched:[]}, RedisAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.data.redis.core.RedisOperations'}], matched:[]}, RedisReactiveAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.data.redis.connection.ReactiveRedisConnectionFactory', 'org.springframework.data.redis.core.ReactiveRedisTemplate', 'reactor.core.publisher.Flux'}], matched:[]}, RedisRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories'}], matched:[]}, RepositoryRestMvcAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration'}], matched:[]}, SolrRepositoriesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.apache.solr.client.solrj.SolrClient', 'org.springframework.data.solr.repository.SolrRepository'}], matched:[]}, SpringDataWebAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.data.web.PageableHandlerMethodArgumentResolver', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer'}], matched:[]}, JestAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'io.searchbox.client.JestClient'}], matched:[]}, FlywayAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'}], matched:[]}, FreeMarkerAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'freemarker.template.Configuration', 'org.springframework.ui.freemarker.FreeMarkerConfigurationFactory'}], matched:[]}, GroovyTemplateAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine'}], matched:[]}, GsonAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.google.gson.Gson'}], matched:[]}, H2ConsoleAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.h2.server.web.WebServlet'}], matched:[]}, HypermediaAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.hateoas.Resource', 'org.springframework.plugin.core.Plugin'}], matched:[]}, HazelcastAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'}], matched:[]}, HazelcastJpaDependencyAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.hazelcast.core.HazelcastInstance', 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean'}], matched:[]}, GsonHttpMessageConvertersConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.google.gson.Gson'}], matched:[]}, JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper'}], matched:[]}, JsonbHttpMessageConvertersConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'javax.json.bind.Jsonb'}], matched:[]}, InfluxDbAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.influxdb.InfluxDB'}], matched:[]}, ProjectInfoAutoConfiguration#buildProperties: {notMatched:[{condition: OnResourceCondition, message: @ConditionalOnResource did not find resource '${spring.info.build.location:classpath:META-INF/build-info.properties}'}], matched:[]}, ProjectInfoAutoConfiguration#gitProperties: {notMatched:[{condition: ProjectInfoAutoConfiguration.GitResourceAvailableCondition, message: GitResource did not find git info at classpath: git.properties}], matched:[]}, IntegrationAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration'}], matched:[]}, JacksonAutoConfiguration.JodaDateTimeJacksonConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.joda.time.DateTime', 'com.fasterxml.jackson.datatype.joda.ser.DateTimeSerializer', 'com.fasterxml.jackson.datatype.joda.cfg.JacksonJodaDateFormat'}], matched:[]}, JacksonAutoConfiguration.ParameterNamesModuleConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule'}], matched:[]}, DataSourceAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'}], matched:[]}, DataSourceTransactionManagerAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.transaction.PlatformTransactionManager'}], matched:[]}, JdbcTemplateAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'}], matched:[]}, JndiDataSourceAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'}], matched:[]}, XADataSourceAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'javax.transaction.TransactionManager', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'}], matched:[]}, JerseyAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.glassfish.jersey.server.spring.SpringComponentProvider', 'javax.servlet.ServletRegistration'}], matched:[]}, JmsAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'javax.jms.Message', 'org.springframework.jms.core.JmsTemplate'}], matched:[]}, JndiConnectionFactoryAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate'}], matched:[]}, ActiveMQAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory'}], matched:[]}, ArtemisAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory'}], matched:[]}, JooqAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.jooq.DSLContext'}], matched:[]}, JsonbAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'javax.json.bind.Jsonb'}], matched:[]}, KafkaAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate'}], matched:[]}, LdapAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource'}], matched:[]}, EmbeddedLdapAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer'}], matched:[]}, LiquibaseAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'liquibase.integration.spring.SpringLiquibase', 'liquibase.change.DatabaseChange'}], matched:[]}, MailSenderAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'javax.mail.internet.MimeMessage', 'org.springframework.mail.MailSender'}], matched:[]}, MailSenderValidatorAutoConfiguration: {notMatched:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (spring.mail.test-connection) did not find property 'test-connection'}], matched:[]}, MongoAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.mongodb.MongoClient'}], matched:[]}, MongoReactiveAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient'}], matched:[]}, EmbeddedMongoAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'com.mongodb.MongoClient', 'de.flapdoodle.embed.mongo.MongodStarter'}], matched:[]}, MustacheAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache'}], matched:[]}, HibernateJpaAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean', 'javax.persistence.EntityManager'}], matched:[]}, QuartzAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.quartz.Scheduler', 'org.springframework.scheduling.quartz.SchedulerFactoryBean', 'org.springframework.transaction.PlatformTransactionManager'}], matched:[]}, ReactorCoreAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'reactor.core.publisher.Mono', 'reactor.core.publisher.Flux'}], matched:[]}, OAuth2ClientAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity', 'org.springframework.security.oauth2.client.registration.ClientRegistration'}], matched:[]}, ReactiveSecurityAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'reactor.core.publisher.Flux', 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity', 'org.springframework.security.web.server.WebFilterChainProxy'}], matched:[]}, ReactiveUserDetailsServiceAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.security.authentication.ReactiveAuthenticationManager'}], matched:[]}, SecurityAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher'}], matched:[]}, SecurityFilterAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer', 'org.springframework.security.config.http.SessionCreationPolicy'}], matched:[]}, SecurityRequestMatcherProviderAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.security.web.util.matcher.RequestMatcher'}], matched:[]}, UserDetailsServiceAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.security.authentication.AuthenticationManager'}], matched:[]}, SendGridAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.sendgrid.SendGrid'}], matched:[]}, SessionAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.session.Session'}], matched:[]}, SolrAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.apache.solr.client.solrj.impl.HttpSolrClient', 'org.apache.solr.client.solrj.impl.CloudSolrClient'}], matched:[]}, ThymeleafAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.thymeleaf.templatemode.TemplateMode'}], matched:[]}, TransactionAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.transaction.PlatformTransactionManager'}], matched:[]}, JtaAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'javax.transaction.Transaction'}], matched:[]}, EmbeddedWebServerFactoryCustomizerAutoConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: @ConditionalOnWebApplication (required) not a servlet web application and not a reactive web application}], matched:[]}, HttpHandlerAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler'}], matched:[]}, ReactiveWebServerFactoryAutoConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: not a reactive web application}], matched:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.http.ReactiveHttpInputMessage'; @ConditionalOnMissingClass did not find unwanted class}]}, WebFluxAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer'}], matched:[]}, ErrorWebFluxAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer'}], matched:[]}, WebClientAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient'}], matched:[]}, DispatcherServletAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.servlet.DispatcherServlet'}], matched:[]}, HttpEncodingAutoConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: not a servlet web application}], matched:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'org.springframework.web.filter.CharacterEncodingFilter'; @ConditionalOnMissingClass did not find unwanted class}]}, MultipartAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'javax.servlet.MultipartConfigElement'}], matched:[]}, ServletWebServerFactoryAutoConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: not a servlet web application}], matched:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'javax.servlet.ServletRequest'; @ConditionalOnMissingClass did not find unwanted class}]}, WebMvcAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required classes 'org.springframework.web.servlet.DispatcherServlet', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer'}], matched:[]}, ErrorMvcAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.servlet.DispatcherServlet'}], matched:[]}, WebServicesAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet'}], matched:[]}, WebSocketReactiveAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'javax.websocket.server.ServerContainer'}], matched:[]}, WebSocketMessagingAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer'}], matched:[]}, WebSocketServletAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'javax.websocket.server.ServerContainer'}], matched:[]}, SentinelWebAutoConfiguration: {notMatched:[{condition: OnWebApplicationCondition, message: @ConditionalOnWebApplication (required) not a servlet web application and not a reactive web application}], matched:[]}, SentinelAutoConfiguration.SentinelXmlConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper'}], matched:[]}, SentinelFeignAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'feign.Feign'}], matched:[]}, PauseResumeEndpointsConfiguration#pauseEndpoint: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.context.restart.RestartEndpoint; SearchStrategy: all) did not find any beans of type org.springframework.cloud.context.restart.RestartEndpoint}], matched:[]}, PauseResumeEndpointsConfiguration#resumeEndpoint: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.context.restart.RestartEndpoint; SearchStrategy: all) did not find any beans of type org.springframework.cloud.context.restart.RestartEndpoint}], matched:[]}, RefreshAutoConfiguration.JpaInvokerConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'javax.persistence.EntityManagerFactory'}], matched:[]}, RestartEndpointWithIntegrationConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.integration.monitor.IntegrationMBeanExporter'}], matched:[]}, RestartEndpointWithoutIntegrationConfiguration#restartEndpointWithoutIntegration: {notMatched:[{condition: OnEnabledEndpointCondition, message: @ConditionalOnEnabledEndpoint no property management.endpoint.restart.enabled found so using endpoint default}], matched:[]}, NoopDiscoveryClientAutoConfiguration: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnMissingBean (types: org.springframework.cloud.client.discovery.DiscoveryClient; SearchStrategy: all) found beans of type 'org.springframework.cloud.client.discovery.DiscoveryClient' nacosDiscoveryClient, compositeDiscoveryClient, simpleDiscoveryClient}], matched:[]}, NoopDiscoveryClientAutoConfiguration.Boot15PortFinderConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'}, {condition: ConditionEvaluationReport.AncestorsMatchedCondition, message: Ancestor org.springframework.cloud.client.discovery.noop.NoopDiscoveryClientAutoConfiguration did not match}], matched:[]}, CloudHypermediaAutoConfiguration: {notMatched:[{condition: OnBeanCondition, message: @ConditionalOnBean (types: org.springframework.cloud.client.hypermedia.RemoteResource; SearchStrategy: all) did not find any beans of type org.springframework.cloud.client.hypermedia.RemoteResource}], matched:[]}, LoadBalancerAutoConfiguration.RetryAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.retry.support.RetryTemplate'}], matched:[]}, LoadBalancerAutoConfiguration.RetryInterceptorAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.retry.support.RetryTemplate'}], matched:[]}, ReactiveLoadBalancerAutoConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient'}], matched:[]}, HttpClientConfiguration.OkHttpClientConfiguration: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'okhttp3.OkHttpClient'}], matched:[]}, RibbonAutoConfiguration#loadBalancedRetryPolicyFactory: {notMatched:[{condition: OnClassCondition, message: @ConditionalOnClass did not find required class 'org.springframework.retry.support.RetryTemplate'}], matched:[]}, RibbonAutoConfiguration#ribbonApplicationContextInitializer: {notMatched:[{condition: OnPropertyCondition, message: @ConditionalOnProperty (ribbon.eager-load.enabled) did not find property 'ribbon.eager-load.enabled'}], matched:[]}, RibbonAutoConfiguration.RibbonClientHttpRequestFactoryConfiguration: {notMatched:[{condition: RibbonAutoConfiguration.OnRibbonRestClientCondition, message: AnyNestedCondition 0 matched 2 did not; NestedCondition on RibbonAutoConfiguration.OnRibbonRestClientCondition.RibbonProperty @ConditionalOnProperty (ribbon.restclient.enabled) did not find property 'ribbon.restclient.enabled'; NestedCondition on RibbonAutoConfiguration.OnRibbonRestClientCondition.ZuulProperty @ConditionalOnProperty (ribbon.http.client.enabled) did not find property 'ribbon.http.client.enabled'}], matched:[{condition: OnClassCondition, message: @ConditionalOnClass found required class 'com.netflix.client.http.HttpRequest'; @ConditionalOnMissingClass did not find unwanted class}]}}, unconditionalClasses:[
org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration, org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration, org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration, org.springframework.cloud.commons.httpclient.HttpClientConfiguration, org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration, org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration, org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration, org.springframework.boot.actuate.autoconfigure.audit.AuditAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.context.ShutdownEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration, org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration, org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration, org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration
], parentId: bootstrap}}